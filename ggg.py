import sys, os, pkg_resources, math
import matplotlib.pyplot as plt, time
sys.path.append('evolving_neural_nets')
from evolve_neural_net import *

data = [(0.0, 7), (0.2, 5.6), (0.4, 3.56), (0.6, 1.23), (0.8, -1.03),
 (1.0, -2.89), (1.2, -4.06), (1.4, -4.39), (1.6, -3.88), (1.8, -2.64),
 (2.0, -0.92), (2.2, 0.95), (2.4, 2.63), (2.6, 3.79), (2.8, 4.22),
 (3.0, 3.8), (3.2, 2.56), (3.4, 0.68), (3.6, -1.58), (3.8, -3.84),
 (4.0, -5.76), (4.2, -7.01), (4.4, -7.38), (4.6, -6.76), (4.8, -5.22)]


def normalize(data):
  normalized_data = []
  min_x, min_y = min(data)
  max_x, max_y = max(data)
  for point in data:
    normalized_data.append(((point[0]-min_x)/(max_x-min_x), (point[1]-min_y)/(max_y-min_y)))
  return normalized_data
  
data = normalize(data)

weights = {(1, 2): -0.35669325041685007, (1, 3): -0.1786929463230532, (1, 4): 0.3239636789856666, (1, 5): 0.9409858283787547, (1, 6): 0.08631090183536459, (1, 7): -0.1661705868500147, (1, 8): 0.656423212479099, (1, 9): 1.166529690831853, (1, 10): 0.1457626468353353, (1, 11): -0.3609341425309761, (2, 13): -0.2366910753283825, (2, 14): -0.6266781261378858, (2, 15): -0.7573681732343249, (2, 16): 0.41963582274157335, (2, 17): -0.2989414013559395, (2, 18): 0.16745757686623686, (3, 13): -0.5270795517136762, (3, 14): 0.3292988253887593, (3, 15): -0.5992366988280109, (3, 16): -0.12883668815177365, (3, 17): -0.7212736806354696, (3, 18): -0.6001747478461704, (4, 13): -1.0515535006046908, (4, 14): 0.03700950024050409, (4, 15): -0.514719198514304, (4, 16): -0.03334043053985514, (4, 17): 0.055487925861693446, (4, 18): -0.6072847487715688, (5, 13): 0.29847422215741837, (5, 14): 1.1936063332583848, (5, 15): 0.3716772222317491, (5, 16): -0.8288985880381772, (5, 17): 0.3978714089244381, (5, 18): -0.3080519681622351, (6, 13): -0.2969138873325289, (6, 14): 0.3141254169806307, (6, 15): -0.056683288315403924, (6, 16): -0.14002394873331495, (6, 17): -0.18994649482998607, (6, 18): -0.055411698843337166, (7, 13): 0.8652973690033521, (7, 14): 0.25536271649198183, (7, 15): -0.46657192772829365, (7, 16): -0.5780045121344674, (7, 17): 0.22442808885332752, (7, 18): -0.1811422959479475, (8, 13): 0.48760293128417775, (8, 14): -0.25238610090671654, (8, 15): -0.22569432639874204, (8, 16): 0.34565625720580584, (8, 17): -0.056162806565954515, (8, 18): 1.5630315251746068, (9, 13): 0.5530079942692969, (9, 14): -0.2733207065466682, (9, 15): -0.2722943084945706, (9, 16): -0.552366247705616, (9, 17): 0.6901068403637257, (9, 18): -0.3352851097562574, (10, 13): -0.6468041373772047, (10, 14): 0.09646382882578883, (10, 15): 0.561647988250531, (10, 16): -0.5032256913240842, (10, 17): -0.1480612711762121, (10, 18): 0.13484257982845632, (11, 13): -0.0315036811593871, (11, 14): -0.4040065382322117, (11, 15): -0.8477582098950374, (11, 16): -0.26743369496917513, (11, 17): -0.6019173842950454, (11, 18): -0.6098481465405055, (12, 13): -0.22400760780225898, (12, 14): -0.04863760130872574, (12, 15): -0.4652082377404001, (12, 16): -0.6054256380729007, (12, 17): 0.21126912495429767, (12, 18): 0.23881516978224393, (13, 20): -0.35431234548780816, (13, 21): -0.35058327498043973, (13, 22): -0.9654239595953745, (14, 20): 0.583328934019613, (14, 21): 0.6248273977251206, (14, 22): -0.46439478731971123, (15, 20): 0.26165864738489913, (15, 21): -0.07071388065917619, (15, 22): -0.8099368612976581, (16, 20): 0.14787663871228085, (16, 21): 0.9382357366689045, (16, 22): -0.5970512016828265, (17, 20): 0.5779545327696132, (17, 21): 0.22309220705550734, (17, 22): -0.6734105955901218, (18, 20): 0.8920444260568134, (18, 21): 0.23203474956561004, (18, 22): 0.12155452477785975, (19, 20): -0.4303511125741931, (19, 21): -0.40837876281868546, (19, 22): -0.5998389017203343, (20, 24): -0.151138473694248, (21, 24): -0.04700341553388243, (22, 24): -0.4927913594790905, (23, 24): 1.1587372846206063}


nn = NeuralNet(weights, data, lambda x: math.tanh(x), 24, [12, 19, 23])


start = time.time()
for _ in range(30):
    nn.rss()

    

print('rss 30 times', time.time()-start)



